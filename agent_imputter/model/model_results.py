# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Model/02_model_results.ipynb.

# %% auto 0
__all__ = ['POSITION_GROUPS', 'merge_dfs', 'group_positions']

# %% ../../nbs/Model/02_model_results.ipynb 3
import numpy as np
import pandas as pd
import math

from typing import Callable, List, Optional, Tuple, Dict

# %% ../../nbs/Model/02_model_results.ipynb 4
POSITION_GROUPS = {
                "G": "Goalkeeper", 
                "CD": "Center Back", 
                "LFB": "Wing Back",
                "RFB": "Wing Back",
                "LW": "Winger",
                "RW": "Winger",
                "DMF": "Center Midfielder",
                "AMF": "Center Midfielder",
                "CMF": "Center Midfielder",
                "S": "Striker",
                "SS": "Striker"
            }

# %% ../../nbs/Model/02_model_results.ipynb 7
def merge_dfs(
    whole_input: pd.DataFrame(),
    train_df: pd.DataFrame(),
    test_df: pd.DataFrame(),
) -> Tuple:
    "merge train and test predictions with full features data frame "
    
    # drop unnecessary columns
    whole_input = whole_input.drop(columns="Unnamed: 0")
    train_df = train_df.drop(columns="Unnamed: 0")
    test_df = test_df.drop(columns="Unnamed: 0")
    
    # merge the two dataframes on 'match_id', 'event_id', and 'player_id'
    train_df = train_df.merge(whole_input[['match_id', 'event_id', 'player_id', 'position']], 
                              on=['match_id', 'event_id', 'player_id'], 
                              how='left')
    # merge the two dataframes on 'match_id', 'event_id', and 'player_id'
    test_df = test_df.merge(whole_input[['match_id', 'event_id', 'player_id', 'position']], 
                              on=['match_id', 'event_id', 'player_id'], 
                              how='left')
    
    return train_df, test_df

# %% ../../nbs/Model/02_model_results.ipynb 10
def group_positions(
    train_df: pd.DataFrame(),
    test_df: pd.DataFrame(),
    position_groups: Dict = POSITION_GROUPS,
)-> Tuple:
    "Group position player ."
    # Create a new column in the DataFrame using the map function and the position_groups dictionary
    train_df["group"] = train_df["position"].map(position_groups)
    test_df["group"] = test_df["position"].map(position_groups)
    
    return train_df, test_df
